{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "43c61910",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{0: <class 'int'>, 1: <class 'float'>, 2: <class 'float'>, 3: <class 'list'>}\n",
      "Assignment 3\n"
     ]
    }
   ],
   "source": [
    "#\"\"\"BMI 6018 Fall 2022 \n",
    "\n",
    "#Problem 1: Lists, Sets and Coersion\n",
    "\n",
    "#1.a Create a list of integers no fewer than 10 items from 0 to 9.\n",
    "one_a = [0,1,2,3,4,5,6,7,8,9]\n",
    " #.b Add 3 to the 5th indexed element\n",
    "one_b = one_a[5] + 3\n",
    " #.c Coerce all elements in the list to floats using list comprehension\n",
    "one_c = [float(x) for x in one_a]\n",
    " #.d Coerce the list to a set\n",
    "one_d = set(one_a)\n",
    " #.e Using a method, append int 10 to the set\n",
    "one_e = set(one_d)\n",
    "one_e.add(10)\n",
    " #.f Using a method, pop an item from the set\n",
    "one_f = set(one_e)\n",
    "one_f.pop()\n",
    " #.g Using a length counting function, count the number of items in the set\n",
    "one_g = len(one_f)\n",
    " #.h Check if the number of items in the set is the same as the number of items in the list\n",
    "one_h = (len(one_f) == len(one_a))\n",
    " #.i Coerce the set to a list and use the \"+\" operator combine the list to the list from 1.a\n",
    "one_i = list(one_f) + one_a\n",
    " #.j Coerce 1.i to a set\n",
    "one_j = set(one_i)\n",
    " #.k Count the number of elements in the 1.j\n",
    "one_k = len(one_j)\n",
    "\n",
    "\n",
    "#Problem 2: Dictionary woes\n",
    "\n",
    "two_patient_dictionary_kinoko = {\n",
    "  \"name\" : \"Kinoko\",\n",
    "  \"year\" : 2021\n",
    "}\n",
    "two_patient_dictionary_dango = {\n",
    "  \"name\" : \"Dango\",\n",
    "  \"year\" : 2019\n",
    "}\n",
    "two_patient_dictionary_mochi  = {\n",
    "  \"name\" : \"Mochi\",\n",
    "  \"year\" : 2020\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#2.a Combine the three sample dictionaries (given below) into a nested dictionary (nested in programming means joined), named \n",
    "    #two_a, ensure the key names are the same as the dictionary names.\n",
    "two_a = { \n",
    "    \"two_patient_dictionary_kinoko\": two_patient_dictionary_kinoko,\n",
    "    \"two_patient_dictionary_dango\": two_patient_dictionary_dango,\n",
    "    \"two_patient_dictionary_mochi\": two_patient_dictionary_mochi,\n",
    "}\n",
    " #.b Using keys, retrieve the Dango's name from 2.a\n",
    "two_b = two_a[\"two_patient_dictionary_dango\"][\"name\"]\n",
    " #.c Using keys, update the value of Mochi's year to 2018. This should not be a variable\n",
    "    #and should simply update 2.a.\n",
    "two_a[\"two_patient_dictionary_mochi\"][\"year\"] = 2018\n",
    "two_c = two_a[\"two_patient_dictionary_mochi\"][\"year\"]\n",
    " #.d Manually create a dictionary that has a single level and contains each patient\n",
    "    #as the key and the year as the value. Set Mochi's year to 2019.'\n",
    "two_d = {\"Kinoko\": 2021, \"Dango\": 2019, \"Mochi\":2019}\n",
    " #.e Coerce the keys of 2.d into a list\n",
    "two_e = list(two_d.keys())\n",
    " #.f Coerce the values of 2.d into a list\n",
    "two_f = list(two_d.values())\n",
    " #.g Use the zip function to combine 2.e and 2.f into a dictionary again\n",
    "two_g = dict(zip(two_e, two_f))\n",
    "\n",
    "\n",
    "\n",
    "#Problem 3: Set combinations\n",
    "\n",
    "three_setA = {1,2,3,4,5}\n",
    "three_setB = {2,3,4,5,6}\n",
    "three_setC = {3,5,7,9}\n",
    "three_setD = {2,4,6,8}\n",
    "three_setE = {1,2,3,4}\n",
    "\n",
    "\n",
    "#Given the predefined sets below and using set methods\n",
    "#3.a Is set E a subset of set A\n",
    "three_a = three_setE.issubset(three_setA)\n",
    " #.b Is set E a strict subset of set A\n",
    "three_b = three_setE < three_setA\n",
    " #.c Create a set that is the intersection of set A and set B\n",
    "three_c = three_setA & three_setB\n",
    " #.d Create a set that is the union of sets C, D and E\n",
    "three_d = three_setC | three_setD | three_setE\n",
    " #.e add 9 to the set\n",
    "three_e = set(three_d)\n",
    "three_e.add(9)\n",
    "\n",
    "#.f Using == compare this set to the list in one_a\n",
    "three_f = (three_e == one_a)\n",
    "\n",
    "#.g Explain why they are not the same. What would you need to change if you\n",
    "    #wanted this to be True?\n",
    "three_g = (\n",
    "    \"Not the same because set and list and elements differ You would need to compare sets and include 0: set(one_a) == (three_e) | {0}.\"\n",
    ")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Problem 4: Changing variable types\n",
    "\n",
    "#For each step you will modify a variable, then append the type of the variable\n",
    "#to a list. Do not recreate the list variable, it should be a running list of \n",
    "#types.\n",
    "\n",
    "#4.a Create a variable of type int with the value of 8\n",
    "four_a = 8\n",
    " #.b Create an empty list \n",
    "four_b = []\n",
    " #.c Using type(), add the type of 4.a to this list\n",
    "four_b.append(type(four_a))\n",
    "four_c = four_b\n",
    " #.d Add 0.39 to 4.c\n",
    "four_d = four_a + 0.39\n",
    "# 4.e append the type of (the new numeric variable) to the list\n",
    "four_b.append(type(four_d))\n",
    " #.f exponentiate to the -10, ie: 4.d^-10,(hint: there might be an artihmetic operator to do so) round it to no \n",
    "    #decimal places, and append to list.\n",
    "four_f = round(four_d ** -10, 0)\n",
    "four_b.append(type(four_f))\n",
    " #.g append the type to the list\n",
    "four_b.append(type(four_b))\n",
    "four_g = four_b\n",
    " \n",
    " \n",
    "#Problem 5: More variable type changes\n",
    "\n",
    "#Continue from where you left off in Problem 4.\n",
    "\n",
    "#5.a Manually create a dictionary where the values are items in the list from where we left in \n",
    "    #problem 4, and the keys should be their index in the list. Print the dictionary.\n",
    "five_a = {i: v for i, v in enumerate(four_b)}\n",
    "print(five_a)\n",
    "\n",
    " #.b Add 300 and coerce it into a string\n",
    "five_b = str(300)\n",
    "\n",
    " #.c append the type to the list\n",
    "four_b.append(type(five_b))\n",
    "five_c = four_b\n",
    "\n",
    " #.d slice the string up to the 2nd element\n",
    "five_d = five_b[:2]\n",
    "\n",
    " #.e append the type to the list\n",
    "four_b.append(type(five_d))\n",
    "five_e = four_b\n",
    "\n",
    " #.f use list comprehension to convert this into a new list of integers\n",
    "five_f = [int(ch) for ch in five_d]\n",
    "\n",
    " #.g append the type to the list\n",
    "four_b.append(type(five_f))\n",
    "five_g = four_b\n",
    "\n",
    " #.h append the type of three_setA to the list\n",
    "four_b.append(type(three_setA))\n",
    "five_h = four_b\n",
    "\n",
    "#Start your assignment here\n",
    "print(\"Assignment 3\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d296fde-bfe1-460f-8763-6c71b05a89d2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
